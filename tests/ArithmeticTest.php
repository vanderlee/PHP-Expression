<?php

use PHPUnit\Framework\TestCase;
use Vanderlee\Expression\Exception;
use Vanderlee\Expression\Expression;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-02-16 at 20:05:00.
 */
class ArithmeticTest extends TestCase
{

    /**
     * @var Expression
     */
    protected $object;

    /**
     * @throws Exception
     */
    public function testAddition()
    {
        $this->assertEquals(5, $this->object->evaluate('2+3'));
        $this->assertEquals(9, $this->object->evaluate('2+3+4'));
        $this->assertEquals(0, $this->object->evaluate('0+0'));
        $this->assertEquals(0, $this->object->evaluate('1+-1'));
    }

    /**
     * @throws Exception
     */
    public function testSubtraction()
    {
        $this->assertEquals(1, $this->object->evaluate('3-2'));
        $this->assertEquals(-1, $this->object->evaluate('2-3'));
        $this->assertEquals(-5, $this->object->evaluate('2-3-4'));
        $this->assertEquals(0, $this->object->evaluate('0-0'));
        $this->assertEquals(2, $this->object->evaluate('1-(-1)'));
    }

    /**
     * @throws Exception
     */
    public function testMultiplication()
    {
        $this->assertEquals(6, $this->object->evaluate('2*3'));
        $this->assertEquals(24, $this->object->evaluate('2*3*4'));
        $this->assertEquals(0, $this->object->evaluate('0*0'));
        $this->assertEquals(-1, $this->object->evaluate('1*-1'));
    }

    /**
     * @throws Exception
     */
    public function testDivision()
    {
        $this->assertEquals(2, $this->object->evaluate('6/3'));
        $this->assertEquals(2, $this->object->evaluate('24/4/3'));
        $this->assertEquals(0, $this->object->evaluate('0/1'));
    }

    public function testDivisionByZero()
    {
        $this->expectException(Exception::class);
        $this->expectExceptionMessage('Division by zero');
        $this->object->evaluate('0/0');
    }

    /**
     * @throws Exception
     */
    public function testModulo()
    {
        $this->assertEquals(0, $this->object->evaluate('12%1'));
        $this->assertEquals(0, $this->object->evaluate('12%2'));
        $this->assertEquals(0, $this->object->evaluate('12%3'));
        $this->assertEquals(0, $this->object->evaluate('12%4'));
        $this->assertEquals(2, $this->object->evaluate('12%5'));
        $this->assertEquals(0, $this->object->evaluate('12%6'));
        $this->assertEquals(5, $this->object->evaluate('12%7'));
        $this->assertEquals(4, $this->object->evaluate('12%8'));
    }

    public function testModuleByZero()
    {
        $this->expectException(Exception::class);
        $this->expectExceptionMessage('Modulo by zero');
        $this->object->evaluate('12%0');
    }

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp(): void
    {
        $this->object = new Expression();
    }
}
